# source: https://eu1.prisma.sh/mr-jason-o-righelato/records-app/records
# timestamp: Tue Jun 09 2020 12:48:07 GMT+0100 (British Summer Time)

type AggregateBreedingCode {
  count: Int!
}

type AggregateClassification {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateLatLng {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateMasterSite {
  count: Int!
}

type AggregateRecord {
  count: Int!
}

type AggregateSpecies {
  count: Int!
}

type AggregateSpeciesStatus {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BreedingCode implements Node {
  id: ID!
  code: String!
  group: String
  description: String
}

"""A connection to a list of items."""
type BreedingCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BreedingCodeEdge]!
  aggregate: AggregateBreedingCode!
}

input BreedingCodeCreateInput {
  id: ID
  code: String!
  group: String
  description: String
}

input BreedingCodeCreateOneInput {
  create: BreedingCodeCreateInput
  connect: BreedingCodeWhereUniqueInput
}

"""An edge in a connection."""
type BreedingCodeEdge {
  """The item at the end of the edge."""
  node: BreedingCode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BreedingCodeOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  group_ASC
  group_DESC
  description_ASC
  description_DESC
}

type BreedingCodePreviousValues {
  id: ID!
  code: String!
  group: String
  description: String
}

type BreedingCodeSubscriptionPayload {
  mutation: MutationType!
  node: BreedingCode
  updatedFields: [String!]
  previousValues: BreedingCodePreviousValues
}

input BreedingCodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BreedingCodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BreedingCodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BreedingCodeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BreedingCodeWhereInput
}

input BreedingCodeUpdateDataInput {
  code: String
  group: String
  description: String
}

input BreedingCodeUpdateInput {
  code: String
  group: String
  description: String
}

input BreedingCodeUpdateManyMutationInput {
  code: String
  group: String
  description: String
}

input BreedingCodeUpdateOneInput {
  create: BreedingCodeCreateInput
  connect: BreedingCodeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BreedingCodeUpdateDataInput
  upsert: BreedingCodeUpsertNestedInput
}

input BreedingCodeUpsertNestedInput {
  update: BreedingCodeUpdateDataInput!
  create: BreedingCodeCreateInput!
}

input BreedingCodeWhereInput {
  """Logical AND on all given filters."""
  AND: [BreedingCodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BreedingCodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BreedingCodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  group: String

  """All values that are not equal to given value."""
  group_not: String

  """All values that are contained in given list."""
  group_in: [String!]

  """All values that are not contained in given list."""
  group_not_in: [String!]

  """All values less than the given value."""
  group_lt: String

  """All values less than or equal the given value."""
  group_lte: String

  """All values greater than the given value."""
  group_gt: String

  """All values greater than or equal the given value."""
  group_gte: String

  """All values containing the given string."""
  group_contains: String

  """All values not containing the given string."""
  group_not_contains: String

  """All values starting with the given string."""
  group_starts_with: String

  """All values not starting with the given string."""
  group_not_starts_with: String

  """All values ending with the given string."""
  group_ends_with: String

  """All values not ending with the given string."""
  group_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input BreedingCodeWhereUniqueInput {
  id: ID
}

type Classification implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ClassificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassificationEdge]!
  aggregate: AggregateClassification!
}

input ClassificationCreateInput {
  id: ID
  name: String!
}

input ClassificationCreateOneInput {
  create: ClassificationCreateInput
  connect: ClassificationWhereUniqueInput
}

"""An edge in a connection."""
type ClassificationEdge {
  """The item at the end of the edge."""
  node: Classification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassificationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ClassificationPreviousValues {
  id: ID!
  name: String!
}

type ClassificationSubscriptionPayload {
  mutation: MutationType!
  node: Classification
  updatedFields: [String!]
  previousValues: ClassificationPreviousValues
}

input ClassificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassificationWhereInput
}

input ClassificationUpdateDataInput {
  name: String
}

input ClassificationUpdateInput {
  name: String
}

input ClassificationUpdateManyMutationInput {
  name: String
}

input ClassificationUpdateOneRequiredInput {
  create: ClassificationCreateInput
  connect: ClassificationWhereUniqueInput
  update: ClassificationUpdateDataInput
  upsert: ClassificationUpsertNestedInput
}

input ClassificationUpsertNestedInput {
  update: ClassificationUpdateDataInput!
  create: ClassificationCreateInput!
}

input ClassificationWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input ClassificationWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
}

input GroupCreateManyInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
}

input GroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateDataInput {
  name: String
}

input GroupUpdateInput {
  name: String
}

input GroupUpdateManyDataInput {
  name: String
}

input GroupUpdateManyInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueNestedInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueNestedInput!]
}

input GroupUpdateManyMutationInput {
  name: String
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateWithWhereUniqueNestedInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateDataInput!
}

input GroupUpsertWithWhereUniqueNestedInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateDataInput!
  create: GroupCreateInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input GroupWhereUniqueInput {
  id: ID
}

type Image implements Node {
  id: ID!
  src: String!
  public_id: String
  original_filename: String
  author: User!
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  src: String!
  public_id: String
  original_filename: String
  author: UserCreateOneInput!
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  src_ASC
  src_DESC
  public_id_ASC
  public_id_DESC
  original_filename_ASC
  original_filename_DESC
}

type ImagePreviousValues {
  id: ID!
  src: String!
  public_id: String
  original_filename: String
}

input ImageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  src: String

  """All values that are not equal to given value."""
  src_not: String

  """All values that are contained in given list."""
  src_in: [String!]

  """All values that are not contained in given list."""
  src_not_in: [String!]

  """All values less than the given value."""
  src_lt: String

  """All values less than or equal the given value."""
  src_lte: String

  """All values greater than the given value."""
  src_gt: String

  """All values greater than or equal the given value."""
  src_gte: String

  """All values containing the given string."""
  src_contains: String

  """All values not containing the given string."""
  src_not_contains: String

  """All values starting with the given string."""
  src_starts_with: String

  """All values not starting with the given string."""
  src_not_starts_with: String

  """All values ending with the given string."""
  src_ends_with: String

  """All values not ending with the given string."""
  src_not_ends_with: String
  public_id: String

  """All values that are not equal to given value."""
  public_id_not: String

  """All values that are contained in given list."""
  public_id_in: [String!]

  """All values that are not contained in given list."""
  public_id_not_in: [String!]

  """All values less than the given value."""
  public_id_lt: String

  """All values less than or equal the given value."""
  public_id_lte: String

  """All values greater than the given value."""
  public_id_gt: String

  """All values greater than or equal the given value."""
  public_id_gte: String

  """All values containing the given string."""
  public_id_contains: String

  """All values not containing the given string."""
  public_id_not_contains: String

  """All values starting with the given string."""
  public_id_starts_with: String

  """All values not starting with the given string."""
  public_id_not_starts_with: String

  """All values ending with the given string."""
  public_id_ends_with: String

  """All values not ending with the given string."""
  public_id_not_ends_with: String
  original_filename: String

  """All values that are not equal to given value."""
  original_filename_not: String

  """All values that are contained in given list."""
  original_filename_in: [String!]

  """All values that are not contained in given list."""
  original_filename_not_in: [String!]

  """All values less than the given value."""
  original_filename_lt: String

  """All values less than or equal the given value."""
  original_filename_lte: String

  """All values greater than the given value."""
  original_filename_gt: String

  """All values greater than or equal the given value."""
  original_filename_gte: String

  """All values containing the given string."""
  original_filename_contains: String

  """All values not containing the given string."""
  original_filename_not_contains: String

  """All values starting with the given string."""
  original_filename_starts_with: String

  """All values not starting with the given string."""
  original_filename_not_starts_with: String

  """All values ending with the given string."""
  original_filename_ends_with: String

  """All values not ending with the given string."""
  original_filename_not_ends_with: String
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateDataInput {
  src: String
  public_id: String
  original_filename: String
  author: UserUpdateOneRequiredInput
}

input ImageUpdateInput {
  src: String
  public_id: String
  original_filename: String
  author: UserUpdateOneRequiredInput
}

input ImageUpdateManyDataInput {
  src: String
  public_id: String
  original_filename: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  delete: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueNestedInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ImageScalarWhereInput!]
  upsert: [ImageUpsertWithWhereUniqueNestedInput!]
}

input ImageUpdateManyMutationInput {
  src: String
  public_id: String
  original_filename: String
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateDataInput!
}

input ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  src: String

  """All values that are not equal to given value."""
  src_not: String

  """All values that are contained in given list."""
  src_in: [String!]

  """All values that are not contained in given list."""
  src_not_in: [String!]

  """All values less than the given value."""
  src_lt: String

  """All values less than or equal the given value."""
  src_lte: String

  """All values greater than the given value."""
  src_gt: String

  """All values greater than or equal the given value."""
  src_gte: String

  """All values containing the given string."""
  src_contains: String

  """All values not containing the given string."""
  src_not_contains: String

  """All values starting with the given string."""
  src_starts_with: String

  """All values not starting with the given string."""
  src_not_starts_with: String

  """All values ending with the given string."""
  src_ends_with: String

  """All values not ending with the given string."""
  src_not_ends_with: String
  public_id: String

  """All values that are not equal to given value."""
  public_id_not: String

  """All values that are contained in given list."""
  public_id_in: [String!]

  """All values that are not contained in given list."""
  public_id_not_in: [String!]

  """All values less than the given value."""
  public_id_lt: String

  """All values less than or equal the given value."""
  public_id_lte: String

  """All values greater than the given value."""
  public_id_gt: String

  """All values greater than or equal the given value."""
  public_id_gte: String

  """All values containing the given string."""
  public_id_contains: String

  """All values not containing the given string."""
  public_id_not_contains: String

  """All values starting with the given string."""
  public_id_starts_with: String

  """All values not starting with the given string."""
  public_id_not_starts_with: String

  """All values ending with the given string."""
  public_id_ends_with: String

  """All values not ending with the given string."""
  public_id_not_ends_with: String
  original_filename: String

  """All values that are not equal to given value."""
  original_filename_not: String

  """All values that are contained in given list."""
  original_filename_in: [String!]

  """All values that are not contained in given list."""
  original_filename_not_in: [String!]

  """All values less than the given value."""
  original_filename_lt: String

  """All values less than or equal the given value."""
  original_filename_lte: String

  """All values greater than the given value."""
  original_filename_gt: String

  """All values greater than or equal the given value."""
  original_filename_gte: String

  """All values containing the given string."""
  original_filename_contains: String

  """All values not containing the given string."""
  original_filename_not_contains: String

  """All values starting with the given string."""
  original_filename_starts_with: String

  """All values not starting with the given string."""
  original_filename_not_starts_with: String

  """All values ending with the given string."""
  original_filename_ends_with: String

  """All values not ending with the given string."""
  original_filename_not_ends_with: String
  author: UserWhereInput
}

input ImageWhereUniqueInput {
  id: ID
}

type LatLng implements Node {
  id: ID!
  lat: String!
  lng: String!
}

"""A connection to a list of items."""
type LatLngConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LatLngEdge]!
  aggregate: AggregateLatLng!
}

input LatLngCreateInput {
  id: ID
  lat: String!
  lng: String!
}

input LatLngCreateOneInput {
  create: LatLngCreateInput
  connect: LatLngWhereUniqueInput
}

"""An edge in a connection."""
type LatLngEdge {
  """The item at the end of the edge."""
  node: LatLng!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LatLngOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
}

type LatLngPreviousValues {
  id: ID!
  lat: String!
  lng: String!
}

type LatLngSubscriptionPayload {
  mutation: MutationType!
  node: LatLng
  updatedFields: [String!]
  previousValues: LatLngPreviousValues
}

input LatLngSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LatLngSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LatLngSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LatLngSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LatLngWhereInput
}

input LatLngUpdateDataInput {
  lat: String
  lng: String
}

input LatLngUpdateInput {
  lat: String
  lng: String
}

input LatLngUpdateManyMutationInput {
  lat: String
  lng: String
}

input LatLngUpdateOneInput {
  create: LatLngCreateInput
  connect: LatLngWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LatLngUpdateDataInput
  upsert: LatLngUpsertNestedInput
}

input LatLngUpsertNestedInput {
  update: LatLngUpdateDataInput!
  create: LatLngCreateInput!
}

input LatLngWhereInput {
  """Logical AND on all given filters."""
  AND: [LatLngWhereInput!]

  """Logical OR on all given filters."""
  OR: [LatLngWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LatLngWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  lng: String

  """All values that are not equal to given value."""
  lng_not: String

  """All values that are contained in given list."""
  lng_in: [String!]

  """All values that are not contained in given list."""
  lng_not_in: [String!]

  """All values less than the given value."""
  lng_lt: String

  """All values less than or equal the given value."""
  lng_lte: String

  """All values greater than the given value."""
  lng_gt: String

  """All values greater than or equal the given value."""
  lng_gte: String

  """All values containing the given string."""
  lng_contains: String

  """All values not containing the given string."""
  lng_not_contains: String

  """All values starting with the given string."""
  lng_starts_with: String

  """All values not starting with the given string."""
  lng_not_starts_with: String

  """All values ending with the given string."""
  lng_ends_with: String

  """All values not ending with the given string."""
  lng_not_ends_with: String
}

input LatLngWhereUniqueInput {
  id: ID
}

type Location implements Node {
  id: ID!
  site: String!
  gridRef: String!
  area: String
  masterSite: MasterSite
  siteCode: String
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  site: String!
  gridRef: String!
  area: String
  siteCode: String
  masterSite: MasterSiteCreateOneInput
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  site_ASC
  site_DESC
  gridRef_ASC
  gridRef_DESC
  area_ASC
  area_DESC
  siteCode_ASC
  siteCode_DESC
}

type LocationPreviousValues {
  id: ID!
  site: String!
  gridRef: String!
  area: String
  siteCode: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  site: String
  gridRef: String
  area: String
  siteCode: String
  masterSite: MasterSiteUpdateOneInput
}

input LocationUpdateInput {
  site: String
  gridRef: String
  area: String
  siteCode: String
  masterSite: MasterSiteUpdateOneInput
}

input LocationUpdateManyMutationInput {
  site: String
  gridRef: String
  area: String
  siteCode: String
}

input LocationUpdateOneRequiredInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  site: String

  """All values that are not equal to given value."""
  site_not: String

  """All values that are contained in given list."""
  site_in: [String!]

  """All values that are not contained in given list."""
  site_not_in: [String!]

  """All values less than the given value."""
  site_lt: String

  """All values less than or equal the given value."""
  site_lte: String

  """All values greater than the given value."""
  site_gt: String

  """All values greater than or equal the given value."""
  site_gte: String

  """All values containing the given string."""
  site_contains: String

  """All values not containing the given string."""
  site_not_contains: String

  """All values starting with the given string."""
  site_starts_with: String

  """All values not starting with the given string."""
  site_not_starts_with: String

  """All values ending with the given string."""
  site_ends_with: String

  """All values not ending with the given string."""
  site_not_ends_with: String
  gridRef: String

  """All values that are not equal to given value."""
  gridRef_not: String

  """All values that are contained in given list."""
  gridRef_in: [String!]

  """All values that are not contained in given list."""
  gridRef_not_in: [String!]

  """All values less than the given value."""
  gridRef_lt: String

  """All values less than or equal the given value."""
  gridRef_lte: String

  """All values greater than the given value."""
  gridRef_gt: String

  """All values greater than or equal the given value."""
  gridRef_gte: String

  """All values containing the given string."""
  gridRef_contains: String

  """All values not containing the given string."""
  gridRef_not_contains: String

  """All values starting with the given string."""
  gridRef_starts_with: String

  """All values not starting with the given string."""
  gridRef_not_starts_with: String

  """All values ending with the given string."""
  gridRef_ends_with: String

  """All values not ending with the given string."""
  gridRef_not_ends_with: String
  area: String

  """All values that are not equal to given value."""
  area_not: String

  """All values that are contained in given list."""
  area_in: [String!]

  """All values that are not contained in given list."""
  area_not_in: [String!]

  """All values less than the given value."""
  area_lt: String

  """All values less than or equal the given value."""
  area_lte: String

  """All values greater than the given value."""
  area_gt: String

  """All values greater than or equal the given value."""
  area_gte: String

  """All values containing the given string."""
  area_contains: String

  """All values not containing the given string."""
  area_not_contains: String

  """All values starting with the given string."""
  area_starts_with: String

  """All values not starting with the given string."""
  area_not_starts_with: String

  """All values ending with the given string."""
  area_ends_with: String

  """All values not ending with the given string."""
  area_not_ends_with: String
  siteCode: String

  """All values that are not equal to given value."""
  siteCode_not: String

  """All values that are contained in given list."""
  siteCode_in: [String!]

  """All values that are not contained in given list."""
  siteCode_not_in: [String!]

  """All values less than the given value."""
  siteCode_lt: String

  """All values less than or equal the given value."""
  siteCode_lte: String

  """All values greater than the given value."""
  siteCode_gt: String

  """All values greater than or equal the given value."""
  siteCode_gte: String

  """All values containing the given string."""
  siteCode_contains: String

  """All values not containing the given string."""
  siteCode_not_contains: String

  """All values starting with the given string."""
  siteCode_starts_with: String

  """All values not starting with the given string."""
  siteCode_not_starts_with: String

  """All values ending with the given string."""
  siteCode_ends_with: String

  """All values not ending with the given string."""
  siteCode_not_ends_with: String
  masterSite: MasterSiteWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MasterSite implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type MasterSiteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MasterSiteEdge]!
  aggregate: AggregateMasterSite!
}

input MasterSiteCreateInput {
  id: ID
  name: String!
}

input MasterSiteCreateOneInput {
  create: MasterSiteCreateInput
  connect: MasterSiteWhereUniqueInput
}

"""An edge in a connection."""
type MasterSiteEdge {
  """The item at the end of the edge."""
  node: MasterSite!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MasterSiteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type MasterSitePreviousValues {
  id: ID!
  name: String!
}

type MasterSiteSubscriptionPayload {
  mutation: MutationType!
  node: MasterSite
  updatedFields: [String!]
  previousValues: MasterSitePreviousValues
}

input MasterSiteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MasterSiteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MasterSiteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MasterSiteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MasterSiteWhereInput
}

input MasterSiteUpdateDataInput {
  name: String
}

input MasterSiteUpdateInput {
  name: String
}

input MasterSiteUpdateManyMutationInput {
  name: String
}

input MasterSiteUpdateOneInput {
  create: MasterSiteCreateInput
  connect: MasterSiteWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MasterSiteUpdateDataInput
  upsert: MasterSiteUpsertNestedInput
}

input MasterSiteUpsertNestedInput {
  update: MasterSiteUpdateDataInput!
  create: MasterSiteCreateInput!
}

input MasterSiteWhereInput {
  """Logical AND on all given filters."""
  AND: [MasterSiteWhereInput!]

  """Logical OR on all given filters."""
  OR: [MasterSiteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MasterSiteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input MasterSiteWhereUniqueInput {
  id: ID
}

type Mutation {
  createRecord(data: RecordCreateInput!): Record!
  createClassification(data: ClassificationCreateInput!): Classification!
  createSpeciesStatus(data: SpeciesStatusCreateInput!): SpeciesStatus!
  createBreedingCode(data: BreedingCodeCreateInput!): BreedingCode!
  createMasterSite(data: MasterSiteCreateInput!): MasterSite!
  createGroup(data: GroupCreateInput!): Group!
  createSpecies(data: SpeciesCreateInput!): Species!
  createLatLng(data: LatLngCreateInput!): LatLng!
  createLocation(data: LocationCreateInput!): Location!
  createUser(data: UserCreateInput!): User!
  createImage(data: ImageCreateInput!): Image!
  updateRecord(data: RecordUpdateInput!, where: RecordWhereUniqueInput!): Record
  updateClassification(data: ClassificationUpdateInput!, where: ClassificationWhereUniqueInput!): Classification
  updateSpeciesStatus(data: SpeciesStatusUpdateInput!, where: SpeciesStatusWhereUniqueInput!): SpeciesStatus
  updateBreedingCode(data: BreedingCodeUpdateInput!, where: BreedingCodeWhereUniqueInput!): BreedingCode
  updateMasterSite(data: MasterSiteUpdateInput!, where: MasterSiteWhereUniqueInput!): MasterSite
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateSpecies(data: SpeciesUpdateInput!, where: SpeciesWhereUniqueInput!): Species
  updateLatLng(data: LatLngUpdateInput!, where: LatLngWhereUniqueInput!): LatLng
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deleteRecord(where: RecordWhereUniqueInput!): Record
  deleteClassification(where: ClassificationWhereUniqueInput!): Classification
  deleteSpeciesStatus(where: SpeciesStatusWhereUniqueInput!): SpeciesStatus
  deleteBreedingCode(where: BreedingCodeWhereUniqueInput!): BreedingCode
  deleteMasterSite(where: MasterSiteWhereUniqueInput!): MasterSite
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteSpecies(where: SpeciesWhereUniqueInput!): Species
  deleteLatLng(where: LatLngWhereUniqueInput!): LatLng
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteUser(where: UserWhereUniqueInput!): User
  deleteImage(where: ImageWhereUniqueInput!): Image
  upsertRecord(where: RecordWhereUniqueInput!, create: RecordCreateInput!, update: RecordUpdateInput!): Record!
  upsertClassification(where: ClassificationWhereUniqueInput!, create: ClassificationCreateInput!, update: ClassificationUpdateInput!): Classification!
  upsertSpeciesStatus(where: SpeciesStatusWhereUniqueInput!, create: SpeciesStatusCreateInput!, update: SpeciesStatusUpdateInput!): SpeciesStatus!
  upsertBreedingCode(where: BreedingCodeWhereUniqueInput!, create: BreedingCodeCreateInput!, update: BreedingCodeUpdateInput!): BreedingCode!
  upsertMasterSite(where: MasterSiteWhereUniqueInput!, create: MasterSiteCreateInput!, update: MasterSiteUpdateInput!): MasterSite!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertSpecies(where: SpeciesWhereUniqueInput!, create: SpeciesCreateInput!, update: SpeciesUpdateInput!): Species!
  upsertLatLng(where: LatLngWhereUniqueInput!, create: LatLngCreateInput!, update: LatLngUpdateInput!): LatLng!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  updateManyRecords(data: RecordUpdateManyMutationInput!, where: RecordWhereInput): BatchPayload!
  updateManyClassifications(data: ClassificationUpdateManyMutationInput!, where: ClassificationWhereInput): BatchPayload!
  updateManySpeciesStatuses(data: SpeciesStatusUpdateManyMutationInput!, where: SpeciesStatusWhereInput): BatchPayload!
  updateManyBreedingCodes(data: BreedingCodeUpdateManyMutationInput!, where: BreedingCodeWhereInput): BatchPayload!
  updateManyMasterSites(data: MasterSiteUpdateManyMutationInput!, where: MasterSiteWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManySpecieses(data: SpeciesUpdateManyMutationInput!, where: SpeciesWhereInput): BatchPayload!
  updateManyLatLngs(data: LatLngUpdateManyMutationInput!, where: LatLngWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  deleteManyRecords(where: RecordWhereInput): BatchPayload!
  deleteManyClassifications(where: ClassificationWhereInput): BatchPayload!
  deleteManySpeciesStatuses(where: SpeciesStatusWhereInput): BatchPayload!
  deleteManyBreedingCodes(where: BreedingCodeWhereInput): BatchPayload!
  deleteManyMasterSites(where: MasterSiteWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManySpecieses(where: SpeciesWhereInput): BatchPayload!
  deleteManyLatLngs(where: LatLngWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  RECORDCREATE
  RECORDUPDATE
  RECORDDELETE
  PERMISSIONUPDATE
}

type Query {
  records(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Record]!
  classifications(where: ClassificationWhereInput, orderBy: ClassificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classification]!
  speciesStatuses(where: SpeciesStatusWhereInput, orderBy: SpeciesStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeciesStatus]!
  breedingCodes(where: BreedingCodeWhereInput, orderBy: BreedingCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BreedingCode]!
  masterSites(where: MasterSiteWhereInput, orderBy: MasterSiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MasterSite]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  specieses(where: SpeciesWhereInput, orderBy: SpeciesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Species]!
  latLngs(where: LatLngWhereInput, orderBy: LatLngOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LatLng]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  record(where: RecordWhereUniqueInput!): Record
  classification(where: ClassificationWhereUniqueInput!): Classification
  speciesStatus(where: SpeciesStatusWhereUniqueInput!): SpeciesStatus
  breedingCode(where: BreedingCodeWhereUniqueInput!): BreedingCode
  masterSite(where: MasterSiteWhereUniqueInput!): MasterSite
  group(where: GroupWhereUniqueInput!): Group
  species(where: SpeciesWhereUniqueInput!): Species
  latLng(where: LatLngWhereUniqueInput!): LatLng
  location(where: LocationWhereUniqueInput!): Location
  user(where: UserWhereUniqueInput!): User
  image(where: ImageWhereUniqueInput!): Image
  recordsConnection(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecordConnection!
  classificationsConnection(where: ClassificationWhereInput, orderBy: ClassificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassificationConnection!
  speciesStatusesConnection(where: SpeciesStatusWhereInput, orderBy: SpeciesStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeciesStatusConnection!
  breedingCodesConnection(where: BreedingCodeWhereInput, orderBy: BreedingCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BreedingCodeConnection!
  masterSitesConnection(where: MasterSiteWhereInput, orderBy: MasterSiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MasterSiteConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  speciesesConnection(where: SpeciesWhereInput, orderBy: SpeciesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeciesConnection!
  latLngsConnection(where: LatLngWhereInput, orderBy: LatLngOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LatLngConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Record implements Node {
  id: ID!
  status: SightingStatus!
  author: User!
  legacyObserver: String
  species: Species!
  location: Location!
  count: Int!
  altLocation: String
  date: DateTime!
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  breeding_code: BreedingCode
  createdAt: DateTime!
  featured: Boolean
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  latlng: LatLng
}

"""A connection to a list of items."""
type RecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecordEdge]!
  aggregate: AggregateRecord!
}

input RecordCreateInput {
  id: ID
  status: SightingStatus!
  legacyObserver: String
  count: Int!
  altLocation: String
  date: DateTime!
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  featured: Boolean
  author: UserCreateOneWithoutRecordsInput!
  species: SpeciesCreateOneInput!
  location: LocationCreateOneInput!
  breeding_code: BreedingCodeCreateOneInput
  images: ImageCreateManyInput
  latlng: LatLngCreateOneInput
}

input RecordCreateManyWithoutAuthorInput {
  create: [RecordCreateWithoutAuthorInput!]
  connect: [RecordWhereUniqueInput!]
}

input RecordCreateWithoutAuthorInput {
  id: ID
  status: SightingStatus!
  legacyObserver: String
  count: Int!
  altLocation: String
  date: DateTime!
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  featured: Boolean
  species: SpeciesCreateOneInput!
  location: LocationCreateOneInput!
  breeding_code: BreedingCodeCreateOneInput
  images: ImageCreateManyInput
  latlng: LatLngCreateOneInput
}

"""An edge in a connection."""
type RecordEdge {
  """The item at the end of the edge."""
  node: Record!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecordOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  legacyObserver_ASC
  legacyObserver_DESC
  count_ASC
  count_DESC
  altLocation_ASC
  altLocation_DESC
  date_ASC
  date_DESC
  dateTo_ASC
  dateTo_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  featured_ASC
  featured_DESC
}

type RecordPreviousValues {
  id: ID!
  status: SightingStatus!
  legacyObserver: String
  count: Int!
  altLocation: String
  date: DateTime!
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  createdAt: DateTime!
  featured: Boolean
}

input RecordScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RecordScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecordScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecordScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: SightingStatus

  """All values that are not equal to given value."""
  status_not: SightingStatus

  """All values that are contained in given list."""
  status_in: [SightingStatus!]

  """All values that are not contained in given list."""
  status_not_in: [SightingStatus!]
  legacyObserver: String

  """All values that are not equal to given value."""
  legacyObserver_not: String

  """All values that are contained in given list."""
  legacyObserver_in: [String!]

  """All values that are not contained in given list."""
  legacyObserver_not_in: [String!]

  """All values less than the given value."""
  legacyObserver_lt: String

  """All values less than or equal the given value."""
  legacyObserver_lte: String

  """All values greater than the given value."""
  legacyObserver_gt: String

  """All values greater than or equal the given value."""
  legacyObserver_gte: String

  """All values containing the given string."""
  legacyObserver_contains: String

  """All values not containing the given string."""
  legacyObserver_not_contains: String

  """All values starting with the given string."""
  legacyObserver_starts_with: String

  """All values not starting with the given string."""
  legacyObserver_not_starts_with: String

  """All values ending with the given string."""
  legacyObserver_ends_with: String

  """All values not ending with the given string."""
  legacyObserver_not_ends_with: String
  count: Int

  """All values that are not equal to given value."""
  count_not: Int

  """All values that are contained in given list."""
  count_in: [Int!]

  """All values that are not contained in given list."""
  count_not_in: [Int!]

  """All values less than the given value."""
  count_lt: Int

  """All values less than or equal the given value."""
  count_lte: Int

  """All values greater than the given value."""
  count_gt: Int

  """All values greater than or equal the given value."""
  count_gte: Int
  altLocation: String

  """All values that are not equal to given value."""
  altLocation_not: String

  """All values that are contained in given list."""
  altLocation_in: [String!]

  """All values that are not contained in given list."""
  altLocation_not_in: [String!]

  """All values less than the given value."""
  altLocation_lt: String

  """All values less than or equal the given value."""
  altLocation_lte: String

  """All values greater than the given value."""
  altLocation_gt: String

  """All values greater than or equal the given value."""
  altLocation_gte: String

  """All values containing the given string."""
  altLocation_contains: String

  """All values not containing the given string."""
  altLocation_not_contains: String

  """All values starting with the given string."""
  altLocation_starts_with: String

  """All values not starting with the given string."""
  altLocation_not_starts_with: String

  """All values ending with the given string."""
  altLocation_ends_with: String

  """All values not ending with the given string."""
  altLocation_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  dateTo: DateTime

  """All values that are not equal to given value."""
  dateTo_not: DateTime

  """All values that are contained in given list."""
  dateTo_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTo_not_in: [DateTime!]

  """All values less than the given value."""
  dateTo_lt: DateTime

  """All values less than or equal the given value."""
  dateTo_lte: DateTime

  """All values greater than the given value."""
  dateTo_gt: DateTime

  """All values greater than or equal the given value."""
  dateTo_gte: DateTime
  startTime: String

  """All values that are not equal to given value."""
  startTime_not: String

  """All values that are contained in given list."""
  startTime_in: [String!]

  """All values that are not contained in given list."""
  startTime_not_in: [String!]

  """All values less than the given value."""
  startTime_lt: String

  """All values less than or equal the given value."""
  startTime_lte: String

  """All values greater than the given value."""
  startTime_gt: String

  """All values greater than or equal the given value."""
  startTime_gte: String

  """All values containing the given string."""
  startTime_contains: String

  """All values not containing the given string."""
  startTime_not_contains: String

  """All values starting with the given string."""
  startTime_starts_with: String

  """All values not starting with the given string."""
  startTime_not_starts_with: String

  """All values ending with the given string."""
  startTime_ends_with: String

  """All values not ending with the given string."""
  startTime_not_ends_with: String
  endTime: String

  """All values that are not equal to given value."""
  endTime_not: String

  """All values that are contained in given list."""
  endTime_in: [String!]

  """All values that are not contained in given list."""
  endTime_not_in: [String!]

  """All values less than the given value."""
  endTime_lt: String

  """All values less than or equal the given value."""
  endTime_lte: String

  """All values greater than the given value."""
  endTime_gt: String

  """All values greater than or equal the given value."""
  endTime_gte: String

  """All values containing the given string."""
  endTime_contains: String

  """All values not containing the given string."""
  endTime_not_contains: String

  """All values starting with the given string."""
  endTime_starts_with: String

  """All values not starting with the given string."""
  endTime_not_starts_with: String

  """All values ending with the given string."""
  endTime_ends_with: String

  """All values not ending with the given string."""
  endTime_not_ends_with: String
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
}

type RecordSubscriptionPayload {
  mutation: MutationType!
  node: Record
  updatedFields: [String!]
  previousValues: RecordPreviousValues
}

input RecordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecordSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecordWhereInput
}

input RecordUpdateInput {
  status: SightingStatus
  legacyObserver: String
  count: Int
  altLocation: String
  date: DateTime
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  featured: Boolean
  author: UserUpdateOneRequiredWithoutRecordsInput
  species: SpeciesUpdateOneRequiredInput
  location: LocationUpdateOneRequiredInput
  breeding_code: BreedingCodeUpdateOneInput
  images: ImageUpdateManyInput
  latlng: LatLngUpdateOneInput
}

input RecordUpdateManyDataInput {
  status: SightingStatus
  legacyObserver: String
  count: Int
  altLocation: String
  date: DateTime
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  featured: Boolean
}

input RecordUpdateManyMutationInput {
  status: SightingStatus
  legacyObserver: String
  count: Int
  altLocation: String
  date: DateTime
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  featured: Boolean
}

input RecordUpdateManyWithoutAuthorInput {
  create: [RecordCreateWithoutAuthorInput!]
  connect: [RecordWhereUniqueInput!]
  set: [RecordWhereUniqueInput!]
  disconnect: [RecordWhereUniqueInput!]
  delete: [RecordWhereUniqueInput!]
  update: [RecordUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RecordUpdateManyWithWhereNestedInput!]
  deleteMany: [RecordScalarWhereInput!]
  upsert: [RecordUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RecordUpdateManyWithWhereNestedInput {
  where: RecordScalarWhereInput!
  data: RecordUpdateManyDataInput!
}

input RecordUpdateWithoutAuthorDataInput {
  status: SightingStatus
  legacyObserver: String
  count: Int
  altLocation: String
  date: DateTime
  dateTo: DateTime
  startTime: String
  endTime: String
  notes: String
  featured: Boolean
  species: SpeciesUpdateOneRequiredInput
  location: LocationUpdateOneRequiredInput
  breeding_code: BreedingCodeUpdateOneInput
  images: ImageUpdateManyInput
  latlng: LatLngUpdateOneInput
}

input RecordUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecordWhereUniqueInput!
  data: RecordUpdateWithoutAuthorDataInput!
}

input RecordUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecordWhereUniqueInput!
  update: RecordUpdateWithoutAuthorDataInput!
  create: RecordCreateWithoutAuthorInput!
}

input RecordWhereInput {
  """Logical AND on all given filters."""
  AND: [RecordWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: SightingStatus

  """All values that are not equal to given value."""
  status_not: SightingStatus

  """All values that are contained in given list."""
  status_in: [SightingStatus!]

  """All values that are not contained in given list."""
  status_not_in: [SightingStatus!]
  legacyObserver: String

  """All values that are not equal to given value."""
  legacyObserver_not: String

  """All values that are contained in given list."""
  legacyObserver_in: [String!]

  """All values that are not contained in given list."""
  legacyObserver_not_in: [String!]

  """All values less than the given value."""
  legacyObserver_lt: String

  """All values less than or equal the given value."""
  legacyObserver_lte: String

  """All values greater than the given value."""
  legacyObserver_gt: String

  """All values greater than or equal the given value."""
  legacyObserver_gte: String

  """All values containing the given string."""
  legacyObserver_contains: String

  """All values not containing the given string."""
  legacyObserver_not_contains: String

  """All values starting with the given string."""
  legacyObserver_starts_with: String

  """All values not starting with the given string."""
  legacyObserver_not_starts_with: String

  """All values ending with the given string."""
  legacyObserver_ends_with: String

  """All values not ending with the given string."""
  legacyObserver_not_ends_with: String
  count: Int

  """All values that are not equal to given value."""
  count_not: Int

  """All values that are contained in given list."""
  count_in: [Int!]

  """All values that are not contained in given list."""
  count_not_in: [Int!]

  """All values less than the given value."""
  count_lt: Int

  """All values less than or equal the given value."""
  count_lte: Int

  """All values greater than the given value."""
  count_gt: Int

  """All values greater than or equal the given value."""
  count_gte: Int
  altLocation: String

  """All values that are not equal to given value."""
  altLocation_not: String

  """All values that are contained in given list."""
  altLocation_in: [String!]

  """All values that are not contained in given list."""
  altLocation_not_in: [String!]

  """All values less than the given value."""
  altLocation_lt: String

  """All values less than or equal the given value."""
  altLocation_lte: String

  """All values greater than the given value."""
  altLocation_gt: String

  """All values greater than or equal the given value."""
  altLocation_gte: String

  """All values containing the given string."""
  altLocation_contains: String

  """All values not containing the given string."""
  altLocation_not_contains: String

  """All values starting with the given string."""
  altLocation_starts_with: String

  """All values not starting with the given string."""
  altLocation_not_starts_with: String

  """All values ending with the given string."""
  altLocation_ends_with: String

  """All values not ending with the given string."""
  altLocation_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  dateTo: DateTime

  """All values that are not equal to given value."""
  dateTo_not: DateTime

  """All values that are contained in given list."""
  dateTo_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTo_not_in: [DateTime!]

  """All values less than the given value."""
  dateTo_lt: DateTime

  """All values less than or equal the given value."""
  dateTo_lte: DateTime

  """All values greater than the given value."""
  dateTo_gt: DateTime

  """All values greater than or equal the given value."""
  dateTo_gte: DateTime
  startTime: String

  """All values that are not equal to given value."""
  startTime_not: String

  """All values that are contained in given list."""
  startTime_in: [String!]

  """All values that are not contained in given list."""
  startTime_not_in: [String!]

  """All values less than the given value."""
  startTime_lt: String

  """All values less than or equal the given value."""
  startTime_lte: String

  """All values greater than the given value."""
  startTime_gt: String

  """All values greater than or equal the given value."""
  startTime_gte: String

  """All values containing the given string."""
  startTime_contains: String

  """All values not containing the given string."""
  startTime_not_contains: String

  """All values starting with the given string."""
  startTime_starts_with: String

  """All values not starting with the given string."""
  startTime_not_starts_with: String

  """All values ending with the given string."""
  startTime_ends_with: String

  """All values not ending with the given string."""
  startTime_not_ends_with: String
  endTime: String

  """All values that are not equal to given value."""
  endTime_not: String

  """All values that are contained in given list."""
  endTime_in: [String!]

  """All values that are not contained in given list."""
  endTime_not_in: [String!]

  """All values less than the given value."""
  endTime_lt: String

  """All values less than or equal the given value."""
  endTime_lte: String

  """All values greater than the given value."""
  endTime_gt: String

  """All values greater than or equal the given value."""
  endTime_gte: String

  """All values containing the given string."""
  endTime_contains: String

  """All values not containing the given string."""
  endTime_not_contains: String

  """All values starting with the given string."""
  endTime_starts_with: String

  """All values not starting with the given string."""
  endTime_not_starts_with: String

  """All values ending with the given string."""
  endTime_ends_with: String

  """All values not ending with the given string."""
  endTime_not_ends_with: String
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  author: UserWhereInput
  species: SpeciesWhereInput
  location: LocationWhereInput
  breeding_code: BreedingCodeWhereInput
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  latlng: LatLngWhereInput
}

input RecordWhereUniqueInput {
  id: ID
}

enum SightingStatus {
  DRAFT
  PUBLISHED
  REJECTED
  DUPLICATE
}

type Species implements Node {
  id: ID!
  name: String!
  rarity: Int
  status(where: SpeciesStatusWhereInput, orderBy: SpeciesStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpeciesStatus!]
  classification: Classification!
}

"""A connection to a list of items."""
type SpeciesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeciesEdge]!
  aggregate: AggregateSpecies!
}

input SpeciesCreateInput {
  id: ID
  name: String!
  rarity: Int
  status: SpeciesStatusCreateManyInput
  classification: ClassificationCreateOneInput!
}

input SpeciesCreateOneInput {
  create: SpeciesCreateInput
  connect: SpeciesWhereUniqueInput
}

"""An edge in a connection."""
type SpeciesEdge {
  """The item at the end of the edge."""
  node: Species!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeciesOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rarity_ASC
  rarity_DESC
}

type SpeciesPreviousValues {
  id: ID!
  name: String!
  rarity: Int
}

type SpeciesStatus implements Node {
  id: ID!
  code: String!
  description: String
}

"""A connection to a list of items."""
type SpeciesStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeciesStatusEdge]!
  aggregate: AggregateSpeciesStatus!
}

input SpeciesStatusCreateInput {
  id: ID
  code: String!
  description: String
}

input SpeciesStatusCreateManyInput {
  create: [SpeciesStatusCreateInput!]
  connect: [SpeciesStatusWhereUniqueInput!]
}

"""An edge in a connection."""
type SpeciesStatusEdge {
  """The item at the end of the edge."""
  node: SpeciesStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeciesStatusOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  description_ASC
  description_DESC
}

type SpeciesStatusPreviousValues {
  id: ID!
  code: String!
  description: String
}

input SpeciesStatusScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeciesStatusScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeciesStatusScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeciesStatusScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type SpeciesStatusSubscriptionPayload {
  mutation: MutationType!
  node: SpeciesStatus
  updatedFields: [String!]
  previousValues: SpeciesStatusPreviousValues
}

input SpeciesStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeciesStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeciesStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeciesStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeciesStatusWhereInput
}

input SpeciesStatusUpdateDataInput {
  code: String
  description: String
}

input SpeciesStatusUpdateInput {
  code: String
  description: String
}

input SpeciesStatusUpdateManyDataInput {
  code: String
  description: String
}

input SpeciesStatusUpdateManyInput {
  create: [SpeciesStatusCreateInput!]
  connect: [SpeciesStatusWhereUniqueInput!]
  set: [SpeciesStatusWhereUniqueInput!]
  disconnect: [SpeciesStatusWhereUniqueInput!]
  delete: [SpeciesStatusWhereUniqueInput!]
  update: [SpeciesStatusUpdateWithWhereUniqueNestedInput!]
  updateMany: [SpeciesStatusUpdateManyWithWhereNestedInput!]
  deleteMany: [SpeciesStatusScalarWhereInput!]
  upsert: [SpeciesStatusUpsertWithWhereUniqueNestedInput!]
}

input SpeciesStatusUpdateManyMutationInput {
  code: String
  description: String
}

input SpeciesStatusUpdateManyWithWhereNestedInput {
  where: SpeciesStatusScalarWhereInput!
  data: SpeciesStatusUpdateManyDataInput!
}

input SpeciesStatusUpdateWithWhereUniqueNestedInput {
  where: SpeciesStatusWhereUniqueInput!
  data: SpeciesStatusUpdateDataInput!
}

input SpeciesStatusUpsertWithWhereUniqueNestedInput {
  where: SpeciesStatusWhereUniqueInput!
  update: SpeciesStatusUpdateDataInput!
  create: SpeciesStatusCreateInput!
}

input SpeciesStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeciesStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeciesStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeciesStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input SpeciesStatusWhereUniqueInput {
  id: ID
}

type SpeciesSubscriptionPayload {
  mutation: MutationType!
  node: Species
  updatedFields: [String!]
  previousValues: SpeciesPreviousValues
}

input SpeciesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeciesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeciesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeciesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeciesWhereInput
}

input SpeciesUpdateDataInput {
  name: String
  rarity: Int
  status: SpeciesStatusUpdateManyInput
  classification: ClassificationUpdateOneRequiredInput
}

input SpeciesUpdateInput {
  name: String
  rarity: Int
  status: SpeciesStatusUpdateManyInput
  classification: ClassificationUpdateOneRequiredInput
}

input SpeciesUpdateManyMutationInput {
  name: String
  rarity: Int
}

input SpeciesUpdateOneRequiredInput {
  create: SpeciesCreateInput
  connect: SpeciesWhereUniqueInput
  update: SpeciesUpdateDataInput
  upsert: SpeciesUpsertNestedInput
}

input SpeciesUpsertNestedInput {
  update: SpeciesUpdateDataInput!
  create: SpeciesCreateInput!
}

input SpeciesWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeciesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeciesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeciesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rarity: Int

  """All values that are not equal to given value."""
  rarity_not: Int

  """All values that are contained in given list."""
  rarity_in: [Int!]

  """All values that are not contained in given list."""
  rarity_not_in: [Int!]

  """All values less than the given value."""
  rarity_lt: Int

  """All values less than or equal the given value."""
  rarity_lte: Int

  """All values greater than the given value."""
  rarity_gt: Int

  """All values greater than or equal the given value."""
  rarity_gte: Int
  status_every: SpeciesStatusWhereInput
  status_some: SpeciesStatusWhereInput
  status_none: SpeciesStatusWhereInput
  classification: ClassificationWhereInput
}

input SpeciesWhereUniqueInput {
  id: ID
}

type Subscription {
  record(where: RecordSubscriptionWhereInput): RecordSubscriptionPayload
  classification(where: ClassificationSubscriptionWhereInput): ClassificationSubscriptionPayload
  speciesStatus(where: SpeciesStatusSubscriptionWhereInput): SpeciesStatusSubscriptionPayload
  breedingCode(where: BreedingCodeSubscriptionWhereInput): BreedingCodeSubscriptionPayload
  masterSite(where: MasterSiteSubscriptionWhereInput): MasterSiteSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  species(where: SpeciesSubscriptionWhereInput): SpeciesSubscriptionPayload
  latLng(where: LatLngSubscriptionWhereInput): LatLngSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  records(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Record!]
  group(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  records: RecordCreateManyWithoutAuthorInput
  group: GroupCreateManyInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecordsInput {
  create: UserCreateWithoutRecordsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutRecordsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  group: GroupCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  records: RecordUpdateManyWithoutAuthorInput
  group: GroupUpdateManyInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  records: RecordUpdateManyWithoutAuthorInput
  group: GroupUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutRecordsInput {
  create: UserCreateWithoutRecordsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRecordsDataInput
  upsert: UserUpsertWithoutRecordsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutRecordsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  group: GroupUpdateManyInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutRecordsInput {
  update: UserUpdateWithoutRecordsDataInput!
  create: UserCreateWithoutRecordsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  records_every: RecordWhereInput
  records_some: RecordWhereInput
  records_none: RecordWhereInput
  group_every: GroupWhereInput
  group_some: GroupWhereInput
  group_none: GroupWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
