# import * from './generated/prisma.graphql'

input RecordFromCSVInput {
  species: String
  location: String
  dateFrom: String
  dateTo: String
  count: String
  notes: String
  breedingCode: String
  observer: String
}

type Mutation {     
  addSpecies(
    name: String
    rarity: Int 
    status: [SpeciesCreateInput]
    ): Species!
  deleteImageFromCloudinary(public_id: String): String
  createRecord(data: RecordCreateInput!): Record!
  createRecordFromCSV(data: RecordFromCSVInput!): Record!
  deleteRecord(where: RecordWhereUniqueInput!): Record
  createSpecies(data: SpeciesCreateInput!): Species!
  createUser(data: UserCreateInput!): User!
  createClass(data: ClassCreateInput!): Class!
  createLocation(data: LocationCreateInput!): Location!
  createBreedingCode(data: BreedingCodeCreateInput!): BreedingCode!
  createSpeciesStatus(data: SpeciesStatusCreateInput!): SpeciesStatus!
  images(where: ImageWhereInput): [Image]!
  deleteImage(where: ImageWhereUniqueInput!): Image
}

type Query {
  breedingCodes(where: BreedingCodeWhereInput): [BreedingCode]!
  users(where: UserWhereInput, orderBy: UserOrderByInput): [User]!
  records(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Record]!
  recordsConnection(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecordConnection!
  species(where: SpeciesWhereUniqueInput!): Species
  allSpecies: [Species]!
  specieses(where: SpeciesWhereInput): [Species]!
  classes: [Class]!
  locations(where: LocationWhereInput): [Location]!
  images(where: ImageWhereInput): [Image]!
}
