# import * from './generated/prisma.graphql'

input RecordFromCSVInput {
  species: String
  location: String
  dateFrom: String
  dateTo: String
  count: String
  notes: String
  breedingCode: String
  observer: String
}

type SuccessMessage {
  message: String
}

type Mutation {
  addSpecies(name: String, rarity: Int, status: [SpeciesCreateInput]): Species!
  createRecord(data: RecordCreateInput!): Record!
  createRecordFromCSV(data: RecordFromCSVInput!): Record!
  deleteRecord(where: RecordWhereUniqueInput!): Record
  updateRecord(data: RecordUpdateInput!, where: RecordWhereUniqueInput!): Record
  createSpecies(data: SpeciesCreateInput!): Species!
  createUser(data: UserCreateInput!): User!
  createClassification(data: ClassificationCreateInput!): Classification!
  createLocation(data: LocationCreateInput!): Location!
  createBreedingCode(data: BreedingCodeCreateInput!): BreedingCode!
  createSpeciesStatus(data: SpeciesStatusCreateInput!): SpeciesStatus!
  images(where: ImageWhereInput): [Image]!
  deleteImageFromRecord(public_id: String): Record
  deleteImage(where: ImageWhereUniqueInput!): Image
  signup(email: String!, name: String!, password: String!): User!
  signin(email: String!, password: String!): User! 
  signout: SuccessMessage
}

type Query {
  breedingCodes(where: BreedingCodeWhereInput): [BreedingCode]!
  users(where: UserWhereInput, orderBy: UserOrderByInput): [User]!
  record(where: RecordWhereUniqueInput!): Record
  records(
    where: RecordWhereInput
    orderBy: RecordOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Record]!
  recordsConnection(
    where: RecordWhereInput
    orderBy: RecordOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RecordConnection!
  species(where: SpeciesWhereUniqueInput!): Species
  allSpecies: [Species]!
  specieses(where: SpeciesWhereInput): [Species]!
  classifications: [Classification]!
  locations(where: LocationWhereInput): [Location]!
  images(where: ImageWhereInput): [Image]!
  me: User
}
